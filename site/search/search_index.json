{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"ATS \u8aaa\u660e\u6587\u4ef6","text":"<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD \u6b61\u8fce\uff01\u9019\u88e1\u662f Auto Test System (ATS) \u7684\u5b98\u65b9\u6587\u4ef6\u9996\u9801\u3002</p>"},{"location":"#_1","title":"\u5167\u5bb9\u5927\u7db1","text":"<ul> <li>\u4ec0\u9ebc\u662f ATS</li> <li>\u5b89\u88dd\u8207\u9700\u6c42</li> <li>\u5feb\u901f\u958b\u59cb</li> <li>\u5e38\u898b\u554f\u984c\uff08FAQ\uff09</li> </ul>"},{"location":"#mkdocs-docs-push-github-pages","title":"&gt; \u63d0\u793a\uff1a\u672c\u7db2\u7ad9\u7531 MkDocs \u81ea\u52d5\u751f\u6210\uff0c\u4efb\u4f55\u5c0d <code>docs/</code> \u76ee\u9304\u7684\u8b8a\u66f4\uff0cpush \u4e4b\u5f8c\u6703\u81ea\u52d5\u90e8\u7f72\u5230 GitHub Pages\u3002","text":"<p>\u6b61\u8fce\u4f86\u5230 Auto Test System (ATS) \u7684\u5b98\u65b9\u6587\u4ef6\u3002</p> <ul> <li>\u672c\u7ad9\u540c\u6642\u63d0\u4f9b\u300c\u4f7f\u7528\u624b\u518a\u300d\u8207\u300c\u81ea\u52d5\u5f9e\u7a0b\u5f0f\u78bc\u7522\u751f\u7684 API \u6587\u4ef6\u300d\u3002</li> <li>\u63a8\u85a6\u5de5\u4f5c\u6d41\u7a0b\uff1a\u5728 <code>docs/</code> \u4e0b\u64b0\u5beb\u64cd\u4f5c\u8aaa\u660e\uff1b\u5728\u539f\u59cb\u78bc\u4e2d\u64b0\u5beb docstring\uff0cAPI \u9801\u6703\u81ea\u52d5\u66f4\u65b0\u3002</li> </ul> <p>\u672c\u7db2\u7ad9\u7531 MkDocs + Material \u7522\u751f\uff0cAPI \u5340\u584a\u4f7f\u7528 mkdocstrings (python handler) \u81ea\u52d5\u5f9e\u7a0b\u5f0f\u78bc\u64f7\u53d6\u8aaa\u660e\u3002</p> <p>V0.0</p>"},{"location":"api/","title":"ATS API \u6587\u4ef6","text":"<p>\u4ee5\u4e0b\u5167\u5bb9\u7531 mkdocstrings \u81ea\u52d5\u5f9e\u539f\u59cb\u78bc\u64f7\u53d6\u3002</p>"},{"location":"api/#backend_1","title":"backend\uff08\u5957\u4ef6\u6839\uff09","text":""},{"location":"api/#backend","title":"backend","text":""},{"location":"api/#backend.instruments","title":"instruments","text":""},{"location":"api/#backend.instruments.dmm6500","title":"dmm6500","text":""},{"location":"api/#backend.instruments.dmm6500.DMM6500","title":"DMM6500","text":"<pre><code>DMM6500(resource)\n</code></pre> <p>DMM6500\u5100\u5668\u8a2d\u5b9a  </p> <p>__init() : pyvisa -&gt; rm.open_resource as_dcv() : \u91cf\u6e2c\u96fb\u58d3\u8a2d\u5b9a meas_voltage() : \u91cf\u6e2c\u96fb\u58d3\u547d\u4ee4\u53ca\u8b80\u503c close() : close\u5100\u5668</p> Source code in <code>backend\\instruments\\dmm6500.py</code> <pre><code>def __init__(self, resource):\n    self.rm = pyvisa.ResourceManager()\n    self.dev = self.rm.open_resource(resource, timeout=8000)\n</code></pre>"},{"location":"api/#backend.instruments.keithley2450","title":"keithley2450","text":""},{"location":"api/#backend.instruments.keithley2450.Keithley2450","title":"Keithley2450","text":"<pre><code>Keithley2450(resource)\n</code></pre> <p>Keithley2450\u5100\u5668\u8a2d\u5b9a  </p> <p>__init() : pyvisa -&gt; rm.open_resource as_voltage_source() : \u7576\u96fb\u58d3\u6e90\u8a2d\u5b9a as_current_sink() : \u7576\u96fb\u6d41sink\u8a2d\u5b9a set_voltage() : \u8a2d\u5b9a\u96fb\u58d3 set_sink_current() : \u8a2d\u5b9asink\u96fb\u6d41 meas_current() : \u91cf\u6e2c\u96fb\u6d41\u547d\u4ee4\u53ca\u8b80\u503c meas_voltage() : \u91cf\u6e2c\u96fb\u58d3\u547d\u4ee4\u53ca\u8b80\u503c close() : close\u5100\u5668</p> Source code in <code>backend\\instruments\\keithley2450.py</code> <pre><code>def __init__(self, resource):\n    self.rm = pyvisa.ResourceManager()\n    self.dev = self.rm.open_resource(resource, timeout=8000)\n</code></pre>"},{"location":"api/#backend.main","title":"main","text":""},{"location":"api/#backend.main.sanity_check_writable","title":"sanity_check_writable","text":"<pre><code>sanity_check_writable(out: Path)\n</code></pre> <p>\u78ba\u8a8d\u6a94\u6848\u53ef\u4ee5\u5beb\u5165</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>backend\\main.py</code> <pre><code>def sanity_check_writable(out: Path):\n    \"\"\"\n    \u78ba\u8a8d\u6a94\u6848\u53ef\u4ee5\u5beb\u5165\n    \"\"\"\n    out.mkdir(parents=True, exist_ok=True)\n    probe = out / \"_probe.txt\"\n    try:\n        with open(probe, \"w\", encoding=\"utf-8\", newline=\"\\n\") as f:\n            f.write(\"ok\")\n        probe.unlink(missing_ok=True)\n    except PermissionError as e:\n        raise RuntimeError(f\"Run folder not writable: {out} ({e})\")\n</code></pre>"},{"location":"api/#backend.main.load_plan","title":"load_plan","text":"<pre><code>load_plan(path: str)\n</code></pre> <p>load plan.yaml\u8a2d\u5b9a\u6a94</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>backend\\main.py</code> <pre><code>def load_plan(path: str):\n    \"\"\"\n    load plan.yaml\u8a2d\u5b9a\u6a94\n    \"\"\"\n    p = Path(path)\n    s = p.read_text(encoding=\"utf-8\")\n    if p.suffix.lower() in (\".yaml\",\".yml\") and yaml:\n        return yaml.safe_load(s)\n    return json.loads(s)\n</code></pre>"},{"location":"api/#backend.main.main","title":"main","text":"<pre><code>main()\n</code></pre> <p>\u4e3b\u7a0b\u5f0f</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>backend\\main.py</code> <pre><code>def main():\n    \"\"\"\n    \u4e3b\u7a0b\u5f0f\n    \"\"\"\n    ap = argparse.ArgumentParser()\n    ap.add_argument(\"--plan\", required=True)\n    ap.add_argument(\"--out\", required=True)\n    ap.add_argument(\"--events\", default=\"events.ndjson\")\n    args = ap.parse_args()\n\n    out = Path(args.out); out.mkdir(parents=True, exist_ok=True)\n    sanity_check_writable(out)  #####\n    prog = Progress(out, events_filename=args.events)\n    prog.update(state=\"running\", percent=0, message=\"Start\")\n\n    plan = load_plan(args.plan)\n    try:\n        run_efficiency(plan, out, prog)\n        outs = plan[\"outputs\"]\n        prog.update(state=\"passed\", percent=100, message=\"Done\",\n                    artifacts=[{\"type\":\"csv\",\"path\":outs[\"csv\"]},\n                               {\"type\":\"xlsx\",\"path\":outs[\"excel\"]}])\n        if plan[\"modes\"] == \"run\" :\n            prog.event({\"type\":\"done\",\"state\":\"passed\"})\n    except Exception as e:\n        prog.update(state=\"failed\", message=str(e))\n        prog.event({\"type\":\"done\",\"state\":\"failed\",\"error\":str(e)})\n        raise\n</code></pre>"},{"location":"api/#backend.report","title":"report","text":""},{"location":"api/#backend.report.excel_writer","title":"excel_writer","text":""},{"location":"api/#backend.report.excel_writer.write_efficiency_report","title":"write_efficiency_report","text":"<pre><code>write_efficiency_report(df, xlsx_path)\n</code></pre> <p>\u5c07\u6548\u7387\u8cc7\u6599\u5beb\u5165xlsx\u6a94 \u4e26\u5efa\u7acbchart : Efficiency vs Vin (by loads)</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>backend\\report\\excel_writer.py</code> <pre><code>def write_efficiency_report(df, xlsx_path):\n    \"\"\"\n    \u5c07\u6548\u7387\u8cc7\u6599\u5beb\u5165xlsx\u6a94  \n    \u4e26\u5efa\u7acbchart : Efficiency vs Vin (by loads)  \n    \"\"\"\t\n\n    wb=openpyxl.Workbook(); ws=wb.active; ws.title=\"Data\"\n    ws.append(list(df.columns))\n    for _,r in df.iterrows(): ws.append(list(r.values))\n\n    ws2=wb.create_sheet(\"Eff_By_Combo\")\n    combos=sorted(set((r[\"i_ch1\"], r[\"i23\"]) for _, r in df.iterrows()))\n    ws2.append([\"vin\"]+[f\"i1={i1} i23={i23}\" for (i1,i23) in combos])\n    vins=sorted(df[\"vin\"].unique())\n    for v in vins:\n        row=[v]\n        for (i1,i23) in combos:\n            m=df[(df[\"vin\"]==v)&amp;(df[\"i_ch1\"]==i1)&amp;(df[\"i23\"]==i23)]\n            row.append(m[\"efficiency\"].iloc[0] if len(m)&gt;0 else None)\n        ws2.append(row)\n    chart=LineChart(); chart.title=\"Efficiency vs Vin (by loads)\"; chart.y_axis.title=\"Efficiency\"; chart.x_axis.title=\"Vin (V)\"\n    data=Reference(ws2,min_col=2,min_row=1,max_col=1+len(combos),max_row=1+len(vins))\n    cats=Reference(ws2,min_col=1,min_row=2,max_row=1+len(vins))\n    chart.add_data(data,titles_from_data=True); chart.set_categories(cats); ws2.add_chart(chart,\"H2\")\n    wb.save(xlsx_path)\n</code></pre>"},{"location":"api/#backend.runners","title":"runners","text":""},{"location":"api/#backend.runners.efficiency_xload","title":"efficiency_xload","text":""},{"location":"api/#backend.runners.efficiency_xload.run_efficiency","title":"run_efficiency","text":"<pre><code>run_efficiency(plan, out_dir: Path, prog)\n</code></pre> <p>\u6548\u7387\u91cf\u6e2c\u6d41\u7a0b :  </p> <p>vin = Keithley2450(ins[\"keithley2450_1\"]).as_voltage_source(curr_limit=lim[\"current_limit\"]) ch1 = Keithley2450(ins[\"keithley2450_2\"]).as_current_sink(volt_limit=lim[\"voltage_limit_ch1\"]) x23 = Keithley2450(ins[\"keithley2450_3\"]).as_current_sink(volt_limit=lim[\"voltage_limit_x23\"]) dmm2= DMM6500(ins[\"dmm6500_1\"]).as_dcv() dmm3= DMM6500(ins[\"dmm6500_2\"]).as_dcv()  </p> <p>\u7531plan.yaml \u5b57\u5178\u683c\u5f0f\u53d6\u5f97start, stop, step\u53c3\u6578\u8f49\u6210 list \u8a08\u7b97total progress : total=max(1,len(vin_list)len(i1_list)len(i23_list));  </p> <p>\u4e3b\u6d41\u7a0b :  </p> <pre><code>for v in vin_list:  \n    vin.set_voltage(v)  \n    for i1 in i1_list:  \n        time.sleep(.1)  \n        ch1.set_sink_current(-i1)  \n        for i23 in i23_list:  \n            time.sleep(.1)  \n            x23.set_sink_current(-i23)  \n            time.sleep(.1)  \n            iin=vin.meas_current(); v1=ch1.meas_voltage(); v2=dmm2.meas_voltage(); v3=dmm3.meas_voltage(); v23=x23.meas_voltage()  \n            p_in=v*iin; p_ch1=v1*i1; p_x=i23*(v2-v3); eta   = 0.0 if p_in &lt;= 1e-9 else (p_ch1 + p_x) / p_in  \n            eta = max(0.0, min(1.2, eta))  \n            rows.append(dict(vin=v,i_ch1=i1,i23=i23,iin=iin,v1=v1,v2=v2,v3=v3,v23=v23, p_in=p_in,p_ch1=p_ch1,p_x=p_x,p_out=p_ch1+p_x,efficiency=eta))\n\n            step+=1; prog.update(state=\"running\", percent=int(step/total*100), current={\"vin\":v,\"i_ch1\":i1,\"i23\":i23}, message=f\"VIN={v} I1={i1} I23={i23}\")  \n            if plan[\"modes\"] == \"run\" :  \n                prog.event({\"type\":\"kpi\",\"name\":\"efficiency\",\"vin\":v,\"i_ch1\":i1,\"i23\":i23,\"value\":eta})\n</code></pre> <p>\u7d50\u675f : \u95dc\u9589\u5100\u5668  </p> <pre><code>        vin.off(); ch1.off(); x23.off(); dmm2.close(); dmm3.close()  \n        raw\u8cc7\u6599\u5beb\u5165excel\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>backend\\runners\\efficiency_xload.py</code> <pre><code>def run_efficiency(plan, out_dir: Path, prog):\n    \"\"\"\n    \u6548\u7387\u91cf\u6e2c\u6d41\u7a0b :  \n\n    vin = Keithley2450(ins[\"keithley2450_1\"]).as_voltage_source(curr_limit=lim[\"current_limit\"])  \n    ch1 = Keithley2450(ins[\"keithley2450_2\"]).as_current_sink(volt_limit=lim[\"voltage_limit_ch1\"])  \n    x23 = Keithley2450(ins[\"keithley2450_3\"]).as_current_sink(volt_limit=lim[\"voltage_limit_x23\"])  \n    dmm2= DMM6500(ins[\"dmm6500_1\"]).as_dcv()  \n    dmm3= DMM6500(ins[\"dmm6500_2\"]).as_dcv()  \n\n    \u7531plan.yaml \u5b57\u5178\u683c\u5f0f\u53d6\u5f97start, stop, step\u53c3\u6578\u8f49\u6210 list  \n    \u8a08\u7b97total progress :  \n    total=max(1,len(vin_list)*len(i1_list)*len(i23_list));  \n\n    \u4e3b\u6d41\u7a0b :  \n\n        for v in vin_list:  \n            vin.set_voltage(v)  \n            for i1 in i1_list:  \n                time.sleep(.1)  \n                ch1.set_sink_current(-i1)  \n                for i23 in i23_list:  \n                    time.sleep(.1)  \n                    x23.set_sink_current(-i23)  \n                    time.sleep(.1)  \n                    iin=vin.meas_current(); v1=ch1.meas_voltage(); v2=dmm2.meas_voltage(); v3=dmm3.meas_voltage(); v23=x23.meas_voltage()  \n                    p_in=v*iin; p_ch1=v1*i1; p_x=i23*(v2-v3); eta   = 0.0 if p_in &lt;= 1e-9 else (p_ch1 + p_x) / p_in  \n                    eta = max(0.0, min(1.2, eta))  \n                    rows.append(dict(vin=v,i_ch1=i1,i23=i23,iin=iin,v1=v1,v2=v2,v3=v3,v23=v23, p_in=p_in,p_ch1=p_ch1,p_x=p_x,p_out=p_ch1+p_x,efficiency=eta))  \n\n                    step+=1; prog.update(state=\"running\", percent=int(step/total*100), current={\"vin\":v,\"i_ch1\":i1,\"i23\":i23}, message=f\"VIN={v} I1={i1} I23={i23}\")  \n                    if plan[\"modes\"] == \"run\" :  \n                        prog.event({\"type\":\"kpi\",\"name\":\"efficiency\",\"vin\":v,\"i_ch1\":i1,\"i23\":i23,\"value\":eta})  \n\n    \u7d50\u675f : \u95dc\u9589\u5100\u5668  \n\n    \t        vin.off(); ch1.off(); x23.off(); dmm2.close(); dmm3.close()  \n    \t        raw\u8cc7\u6599\u5beb\u5165excel  \n\n\t\"\"\"\t\n    ins=plan[\"instruments\"]; lim=plan[\"limits\"]; sw=plan[\"sweep\"]; outp=plan[\"outputs\"]\n\n    vin = Keithley2450(ins[\"keithley2450_1\"]).as_voltage_source(curr_limit=lim[\"current_limit\"])\n    ch1 = Keithley2450(ins[\"keithley2450_2\"]).as_current_sink(volt_limit=lim[\"voltage_limit_ch1\"])\n    x23 = Keithley2450(ins[\"keithley2450_3\"]).as_current_sink(volt_limit=lim[\"voltage_limit_x23\"])\n    dmm2= DMM6500(ins[\"dmm6500_1\"]).as_dcv()\n    dmm3= DMM6500(ins[\"dmm6500_2\"]).as_dcv()\n\n    rows=[]; \n    total=max(1,len(sw[\"vin\"])*len(sw[\"i_ch1\"])*len(sw[\"i23\"]));\n    step=0    \n\n    vin_cfg = sw[\"vin\"]\n    if isinstance(vin_cfg, dict):\n        vin_list = np.arange(vin_cfg[\"start\"], vin_cfg[\"stop\"] + 1e-9, vin_cfg[\"step\"]).round(3).tolist()\n    else:\n        vin_list =vin_cfg\n\n    i1_cfg = sw[\"i_ch1\"]\n    if isinstance(i1_cfg, dict):\n        i1_list = np.arange(i1_cfg[\"start\"], i1_cfg[\"stop\"] + 1e-9, i1_cfg[\"step\"]).round(3).tolist()\n    else:\n        i1_list =i1_cfg  \n\n    i23_cfg = sw[\"i23\"]\n    if isinstance(i23_cfg, dict):\n        i23_list = np.arange(i23_cfg[\"start\"], i23_cfg[\"stop\"] + 1e-9, i23_cfg[\"step\"]).round(3).tolist()\n    else:\n        i23_list =i23_cfg  \n\n    total=max(1,len(vin_list)*len(i1_list)*len(i23_list));\n    prog.event({\"type\":\"artifact\",\"total\":total})\n\n    try:\n        for v in vin_list:\n            vin.set_voltage(v)\n            for i1 in i1_list:\n                time.sleep(.1)\n                ch1.set_sink_current(-i1)\n                for i23 in i23_list:\n                    time.sleep(.1)\n                    x23.set_sink_current(-i23)\n                    time.sleep(.1)\n                    iin=vin.meas_current(); v1=ch1.meas_voltage(); v2=dmm2.meas_voltage(); v3=dmm3.meas_voltage(); v23=x23.meas_voltage()\n                    p_in=v*iin; p_ch1=v1*i1; p_x=i23*(v2-v3); eta   = 0.0 if p_in &lt;= 1e-9 else (p_ch1 + p_x) / p_in\n                    eta = max(0.0, min(1.2, eta))\n                    rows.append(dict(vin=v,i_ch1=i1,i23=i23,iin=iin,v1=v1,v2=v2,v3=v3,v23=v23, p_in=p_in,p_ch1=p_ch1,p_x=p_x,p_out=p_ch1+p_x,efficiency=eta))\n\n                    step+=1; prog.update(state=\"running\", percent=int(step/total*100), current={\"vin\":v,\"i_ch1\":i1,\"i23\":i23}, message=f\"VIN={v} I1={i1} I23={i23}\")\n                    if plan[\"modes\"] == \"run\" :\n                        prog.event({\"type\":\"kpi\",\"name\":\"efficiency\",\"vin\":v,\"i_ch1\":i1,\"i23\":i23,\"value\":eta})\n    finally:\n        vin.off(); ch1.off(); x23.off(); dmm2.close(); dmm3.close()\n\n    df=pd.DataFrame(rows)\n    csvp=out_dir/outp[\"csv\"]; df.to_csv(csvp, index=False)\n    xlsxp=out_dir/outp[\"excel\"]; write_efficiency_report(df, xlsxp)\n    if plan[\"modes\"] == \"run\" :\n        prog.event({\"type\":\"artifact\",\"path\":str(csvp)}); prog.event({\"type\":\"artifact\",\"path\":str(xlsxp)})\n</code></pre>"},{"location":"api/#backend.utils","title":"utils","text":""},{"location":"api/#backend.utils.progress","title":"progress","text":""},{"location":"api/#backend.utils.progress.Progress","title":"Progress","text":"<pre><code>Progress(out_dir: Path, events_filename='events.ndjson')\n</code></pre> <p>init () : \u521d\u59cb\u5316 progress.json update () : \u66f4\u65b0 progress.json event () : \u66f4\u65b0events.ndjson</p> Source code in <code>backend\\utils\\progress.py</code> <pre><code>def __init__(self, out_dir: Path, events_filename=\"events.ndjson\"):\n    self.out=out_dir; self.progress=out_dir/\"progress.json\"; self.events=out_dir/events_filename\n    self.out.mkdir(parents=True, exist_ok=True)\n    try:\n        f = open_with_retry(self.events, \"a\"); f.close()\n    except PermissionError:\n        pass\n</code></pre>"},{"location":"api/#backend.utils.progress.open_with_retry","title":"open_with_retry","text":"<pre><code>open_with_retry(path: Path, mode='a', encoding='utf-8', newline='\\n', retries=20, delay=0.05)\n</code></pre> <p>\u5beb\u5165progress.json\u6709retry\u6a5f\u5236 20 run x 0.05 delay, \u907f\u514d\u6a94\u6848\u88ab GUI\u8b80\u6642\u7121\u6cd5\u5b58\u53d6</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>backend\\utils\\progress.py</code> <pre><code>def open_with_retry(path: Path, mode=\"a\", encoding=\"utf-8\", newline=\"\\n\", retries=20, delay=0.05):\n    \"\"\"\n    \u5beb\u5165progress.json\u6709retry\u6a5f\u5236 20 run x 0.05 delay,  \n    \u907f\u514d\u6a94\u6848\u88ab GUI\u8b80\u6642\u7121\u6cd5\u5b58\u53d6  \n    \"\"\"\n    last = None\n    for i in range(retries):\n        try:\n            return open(path, mode, encoding=encoding, newline=newline)\n        except PermissionError as e:\n            last = e\n            time.sleep(delay * (i + 1))\n    return open(path, mode, encoding=encoding, newline=newline)\n</code></pre>"},{"location":"api/#_1","title":"\u5e38\u7528\u5b50\u6a21\u7d44","text":""},{"location":"api/#backend.utils","title":"backend.utils","text":""},{"location":"api/#backend.utils.progress","title":"progress","text":""},{"location":"api/#backend.utils.progress.Progress","title":"Progress","text":"<pre><code>Progress(out_dir: Path, events_filename='events.ndjson')\n</code></pre> <p>init () : \u521d\u59cb\u5316 progress.json update () : \u66f4\u65b0 progress.json event () : \u66f4\u65b0events.ndjson</p> Source code in <code>backend\\utils\\progress.py</code> <pre><code>def __init__(self, out_dir: Path, events_filename=\"events.ndjson\"):\n    self.out=out_dir; self.progress=out_dir/\"progress.json\"; self.events=out_dir/events_filename\n    self.out.mkdir(parents=True, exist_ok=True)\n    try:\n        f = open_with_retry(self.events, \"a\"); f.close()\n    except PermissionError:\n        pass\n</code></pre>"},{"location":"api/#backend.utils.progress.open_with_retry","title":"open_with_retry","text":"<pre><code>open_with_retry(path: Path, mode='a', encoding='utf-8', newline='\\n', retries=20, delay=0.05)\n</code></pre> <p>\u5beb\u5165progress.json\u6709retry\u6a5f\u5236 20 run x 0.05 delay, \u907f\u514d\u6a94\u6848\u88ab GUI\u8b80\u6642\u7121\u6cd5\u5b58\u53d6</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>backend\\utils\\progress.py</code> <pre><code>def open_with_retry(path: Path, mode=\"a\", encoding=\"utf-8\", newline=\"\\n\", retries=20, delay=0.05):\n    \"\"\"\n    \u5beb\u5165progress.json\u6709retry\u6a5f\u5236 20 run x 0.05 delay,  \n    \u907f\u514d\u6a94\u6848\u88ab GUI\u8b80\u6642\u7121\u6cd5\u5b58\u53d6  \n    \"\"\"\n    last = None\n    for i in range(retries):\n        try:\n            return open(path, mode, encoding=encoding, newline=newline)\n        except PermissionError as e:\n            last = e\n            time.sleep(delay * (i + 1))\n    return open(path, mode, encoding=encoding, newline=newline)\n</code></pre>"},{"location":"api/#backend.instruments","title":"backend.instruments","text":""},{"location":"api/#backend.instruments.dmm6500","title":"dmm6500","text":""},{"location":"api/#backend.instruments.dmm6500.DMM6500","title":"DMM6500","text":"<pre><code>DMM6500(resource)\n</code></pre> <p>DMM6500\u5100\u5668\u8a2d\u5b9a  </p> <p>__init() : pyvisa -&gt; rm.open_resource as_dcv() : \u91cf\u6e2c\u96fb\u58d3\u8a2d\u5b9a meas_voltage() : \u91cf\u6e2c\u96fb\u58d3\u547d\u4ee4\u53ca\u8b80\u503c close() : close\u5100\u5668</p> Source code in <code>backend\\instruments\\dmm6500.py</code> <pre><code>def __init__(self, resource):\n    self.rm = pyvisa.ResourceManager()\n    self.dev = self.rm.open_resource(resource, timeout=8000)\n</code></pre>"},{"location":"api/#backend.instruments.keithley2450","title":"keithley2450","text":""},{"location":"api/#backend.instruments.keithley2450.Keithley2450","title":"Keithley2450","text":"<pre><code>Keithley2450(resource)\n</code></pre> <p>Keithley2450\u5100\u5668\u8a2d\u5b9a  </p> <p>__init() : pyvisa -&gt; rm.open_resource as_voltage_source() : \u7576\u96fb\u58d3\u6e90\u8a2d\u5b9a as_current_sink() : \u7576\u96fb\u6d41sink\u8a2d\u5b9a set_voltage() : \u8a2d\u5b9a\u96fb\u58d3 set_sink_current() : \u8a2d\u5b9asink\u96fb\u6d41 meas_current() : \u91cf\u6e2c\u96fb\u6d41\u547d\u4ee4\u53ca\u8b80\u503c meas_voltage() : \u91cf\u6e2c\u96fb\u58d3\u547d\u4ee4\u53ca\u8b80\u503c close() : close\u5100\u5668</p> Source code in <code>backend\\instruments\\keithley2450.py</code> <pre><code>def __init__(self, resource):\n    self.rm = pyvisa.ResourceManager()\n    self.dev = self.rm.open_resource(resource, timeout=8000)\n</code></pre>"},{"location":"api/#backend.runners","title":"backend.runners","text":""},{"location":"api/#backend.runners.efficiency_xload","title":"efficiency_xload","text":""},{"location":"api/#backend.runners.efficiency_xload.run_efficiency","title":"run_efficiency","text":"<pre><code>run_efficiency(plan, out_dir: Path, prog)\n</code></pre> <p>\u6548\u7387\u91cf\u6e2c\u6d41\u7a0b :  </p> <p>vin = Keithley2450(ins[\"keithley2450_1\"]).as_voltage_source(curr_limit=lim[\"current_limit\"]) ch1 = Keithley2450(ins[\"keithley2450_2\"]).as_current_sink(volt_limit=lim[\"voltage_limit_ch1\"]) x23 = Keithley2450(ins[\"keithley2450_3\"]).as_current_sink(volt_limit=lim[\"voltage_limit_x23\"]) dmm2= DMM6500(ins[\"dmm6500_1\"]).as_dcv() dmm3= DMM6500(ins[\"dmm6500_2\"]).as_dcv()  </p> <p>\u7531plan.yaml \u5b57\u5178\u683c\u5f0f\u53d6\u5f97start, stop, step\u53c3\u6578\u8f49\u6210 list \u8a08\u7b97total progress : total=max(1,len(vin_list)len(i1_list)len(i23_list));  </p> <p>\u4e3b\u6d41\u7a0b :  </p> <pre><code>for v in vin_list:  \n    vin.set_voltage(v)  \n    for i1 in i1_list:  \n        time.sleep(.1)  \n        ch1.set_sink_current(-i1)  \n        for i23 in i23_list:  \n            time.sleep(.1)  \n            x23.set_sink_current(-i23)  \n            time.sleep(.1)  \n            iin=vin.meas_current(); v1=ch1.meas_voltage(); v2=dmm2.meas_voltage(); v3=dmm3.meas_voltage(); v23=x23.meas_voltage()  \n            p_in=v*iin; p_ch1=v1*i1; p_x=i23*(v2-v3); eta   = 0.0 if p_in &lt;= 1e-9 else (p_ch1 + p_x) / p_in  \n            eta = max(0.0, min(1.2, eta))  \n            rows.append(dict(vin=v,i_ch1=i1,i23=i23,iin=iin,v1=v1,v2=v2,v3=v3,v23=v23, p_in=p_in,p_ch1=p_ch1,p_x=p_x,p_out=p_ch1+p_x,efficiency=eta))\n\n            step+=1; prog.update(state=\"running\", percent=int(step/total*100), current={\"vin\":v,\"i_ch1\":i1,\"i23\":i23}, message=f\"VIN={v} I1={i1} I23={i23}\")  \n            if plan[\"modes\"] == \"run\" :  \n                prog.event({\"type\":\"kpi\",\"name\":\"efficiency\",\"vin\":v,\"i_ch1\":i1,\"i23\":i23,\"value\":eta})\n</code></pre> <p>\u7d50\u675f : \u95dc\u9589\u5100\u5668  </p> <pre><code>        vin.off(); ch1.off(); x23.off(); dmm2.close(); dmm3.close()  \n        raw\u8cc7\u6599\u5beb\u5165excel\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>backend\\runners\\efficiency_xload.py</code> <pre><code>def run_efficiency(plan, out_dir: Path, prog):\n    \"\"\"\n    \u6548\u7387\u91cf\u6e2c\u6d41\u7a0b :  \n\n    vin = Keithley2450(ins[\"keithley2450_1\"]).as_voltage_source(curr_limit=lim[\"current_limit\"])  \n    ch1 = Keithley2450(ins[\"keithley2450_2\"]).as_current_sink(volt_limit=lim[\"voltage_limit_ch1\"])  \n    x23 = Keithley2450(ins[\"keithley2450_3\"]).as_current_sink(volt_limit=lim[\"voltage_limit_x23\"])  \n    dmm2= DMM6500(ins[\"dmm6500_1\"]).as_dcv()  \n    dmm3= DMM6500(ins[\"dmm6500_2\"]).as_dcv()  \n\n    \u7531plan.yaml \u5b57\u5178\u683c\u5f0f\u53d6\u5f97start, stop, step\u53c3\u6578\u8f49\u6210 list  \n    \u8a08\u7b97total progress :  \n    total=max(1,len(vin_list)*len(i1_list)*len(i23_list));  \n\n    \u4e3b\u6d41\u7a0b :  \n\n        for v in vin_list:  \n            vin.set_voltage(v)  \n            for i1 in i1_list:  \n                time.sleep(.1)  \n                ch1.set_sink_current(-i1)  \n                for i23 in i23_list:  \n                    time.sleep(.1)  \n                    x23.set_sink_current(-i23)  \n                    time.sleep(.1)  \n                    iin=vin.meas_current(); v1=ch1.meas_voltage(); v2=dmm2.meas_voltage(); v3=dmm3.meas_voltage(); v23=x23.meas_voltage()  \n                    p_in=v*iin; p_ch1=v1*i1; p_x=i23*(v2-v3); eta   = 0.0 if p_in &lt;= 1e-9 else (p_ch1 + p_x) / p_in  \n                    eta = max(0.0, min(1.2, eta))  \n                    rows.append(dict(vin=v,i_ch1=i1,i23=i23,iin=iin,v1=v1,v2=v2,v3=v3,v23=v23, p_in=p_in,p_ch1=p_ch1,p_x=p_x,p_out=p_ch1+p_x,efficiency=eta))  \n\n                    step+=1; prog.update(state=\"running\", percent=int(step/total*100), current={\"vin\":v,\"i_ch1\":i1,\"i23\":i23}, message=f\"VIN={v} I1={i1} I23={i23}\")  \n                    if plan[\"modes\"] == \"run\" :  \n                        prog.event({\"type\":\"kpi\",\"name\":\"efficiency\",\"vin\":v,\"i_ch1\":i1,\"i23\":i23,\"value\":eta})  \n\n    \u7d50\u675f : \u95dc\u9589\u5100\u5668  \n\n    \t        vin.off(); ch1.off(); x23.off(); dmm2.close(); dmm3.close()  \n    \t        raw\u8cc7\u6599\u5beb\u5165excel  \n\n\t\"\"\"\t\n    ins=plan[\"instruments\"]; lim=plan[\"limits\"]; sw=plan[\"sweep\"]; outp=plan[\"outputs\"]\n\n    vin = Keithley2450(ins[\"keithley2450_1\"]).as_voltage_source(curr_limit=lim[\"current_limit\"])\n    ch1 = Keithley2450(ins[\"keithley2450_2\"]).as_current_sink(volt_limit=lim[\"voltage_limit_ch1\"])\n    x23 = Keithley2450(ins[\"keithley2450_3\"]).as_current_sink(volt_limit=lim[\"voltage_limit_x23\"])\n    dmm2= DMM6500(ins[\"dmm6500_1\"]).as_dcv()\n    dmm3= DMM6500(ins[\"dmm6500_2\"]).as_dcv()\n\n    rows=[]; \n    total=max(1,len(sw[\"vin\"])*len(sw[\"i_ch1\"])*len(sw[\"i23\"]));\n    step=0    \n\n    vin_cfg = sw[\"vin\"]\n    if isinstance(vin_cfg, dict):\n        vin_list = np.arange(vin_cfg[\"start\"], vin_cfg[\"stop\"] + 1e-9, vin_cfg[\"step\"]).round(3).tolist()\n    else:\n        vin_list =vin_cfg\n\n    i1_cfg = sw[\"i_ch1\"]\n    if isinstance(i1_cfg, dict):\n        i1_list = np.arange(i1_cfg[\"start\"], i1_cfg[\"stop\"] + 1e-9, i1_cfg[\"step\"]).round(3).tolist()\n    else:\n        i1_list =i1_cfg  \n\n    i23_cfg = sw[\"i23\"]\n    if isinstance(i23_cfg, dict):\n        i23_list = np.arange(i23_cfg[\"start\"], i23_cfg[\"stop\"] + 1e-9, i23_cfg[\"step\"]).round(3).tolist()\n    else:\n        i23_list =i23_cfg  \n\n    total=max(1,len(vin_list)*len(i1_list)*len(i23_list));\n    prog.event({\"type\":\"artifact\",\"total\":total})\n\n    try:\n        for v in vin_list:\n            vin.set_voltage(v)\n            for i1 in i1_list:\n                time.sleep(.1)\n                ch1.set_sink_current(-i1)\n                for i23 in i23_list:\n                    time.sleep(.1)\n                    x23.set_sink_current(-i23)\n                    time.sleep(.1)\n                    iin=vin.meas_current(); v1=ch1.meas_voltage(); v2=dmm2.meas_voltage(); v3=dmm3.meas_voltage(); v23=x23.meas_voltage()\n                    p_in=v*iin; p_ch1=v1*i1; p_x=i23*(v2-v3); eta   = 0.0 if p_in &lt;= 1e-9 else (p_ch1 + p_x) / p_in\n                    eta = max(0.0, min(1.2, eta))\n                    rows.append(dict(vin=v,i_ch1=i1,i23=i23,iin=iin,v1=v1,v2=v2,v3=v3,v23=v23, p_in=p_in,p_ch1=p_ch1,p_x=p_x,p_out=p_ch1+p_x,efficiency=eta))\n\n                    step+=1; prog.update(state=\"running\", percent=int(step/total*100), current={\"vin\":v,\"i_ch1\":i1,\"i23\":i23}, message=f\"VIN={v} I1={i1} I23={i23}\")\n                    if plan[\"modes\"] == \"run\" :\n                        prog.event({\"type\":\"kpi\",\"name\":\"efficiency\",\"vin\":v,\"i_ch1\":i1,\"i23\":i23,\"value\":eta})\n    finally:\n        vin.off(); ch1.off(); x23.off(); dmm2.close(); dmm3.close()\n\n    df=pd.DataFrame(rows)\n    csvp=out_dir/outp[\"csv\"]; df.to_csv(csvp, index=False)\n    xlsxp=out_dir/outp[\"excel\"]; write_efficiency_report(df, xlsxp)\n    if plan[\"modes\"] == \"run\" :\n        prog.event({\"type\":\"artifact\",\"path\":str(csvp)}); prog.event({\"type\":\"artifact\",\"path\":str(xlsxp)})\n</code></pre>"},{"location":"api/#backend.report","title":"backend.report","text":""},{"location":"api/#backend.report.excel_writer","title":"excel_writer","text":""},{"location":"api/#backend.report.excel_writer.write_efficiency_report","title":"write_efficiency_report","text":"<pre><code>write_efficiency_report(df, xlsx_path)\n</code></pre> <p>\u5c07\u6548\u7387\u8cc7\u6599\u5beb\u5165xlsx\u6a94 \u4e26\u5efa\u7acbchart : Efficiency vs Vin (by loads)</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>backend\\report\\excel_writer.py</code> <pre><code>def write_efficiency_report(df, xlsx_path):\n    \"\"\"\n    \u5c07\u6548\u7387\u8cc7\u6599\u5beb\u5165xlsx\u6a94  \n    \u4e26\u5efa\u7acbchart : Efficiency vs Vin (by loads)  \n    \"\"\"\t\n\n    wb=openpyxl.Workbook(); ws=wb.active; ws.title=\"Data\"\n    ws.append(list(df.columns))\n    for _,r in df.iterrows(): ws.append(list(r.values))\n\n    ws2=wb.create_sheet(\"Eff_By_Combo\")\n    combos=sorted(set((r[\"i_ch1\"], r[\"i23\"]) for _, r in df.iterrows()))\n    ws2.append([\"vin\"]+[f\"i1={i1} i23={i23}\" for (i1,i23) in combos])\n    vins=sorted(df[\"vin\"].unique())\n    for v in vins:\n        row=[v]\n        for (i1,i23) in combos:\n            m=df[(df[\"vin\"]==v)&amp;(df[\"i_ch1\"]==i1)&amp;(df[\"i23\"]==i23)]\n            row.append(m[\"efficiency\"].iloc[0] if len(m)&gt;0 else None)\n        ws2.append(row)\n    chart=LineChart(); chart.title=\"Efficiency vs Vin (by loads)\"; chart.y_axis.title=\"Efficiency\"; chart.x_axis.title=\"Vin (V)\"\n    data=Reference(ws2,min_col=2,min_row=1,max_col=1+len(combos),max_row=1+len(vins))\n    cats=Reference(ws2,min_col=1,min_row=2,max_row=1+len(vins))\n    chart.add_data(data,titles_from_data=True); chart.set_categories(cats); ws2.add_chart(chart,\"H2\")\n    wb.save(xlsx_path)\n</code></pre>"},{"location":"api/#_2","title":"\u4f9d\u9700\u8981\u7e7c\u7e8c\u52a0\u2026","text":""},{"location":"events/","title":"\u6e2c\u8a66\u8a08\u756b\u8a2d\u5b9a\u6a94","text":"<p>\u4ee5\u4e0b\u5167\u5bb9\u81ea\u52d5\u5f15\u7528 repo \u7684 <code>Test/events.ndjson</code>\uff1a</p>"},{"location":"events/#eventsndjson","title":"events.ndjson","text":"<pre><code>{\"type\": \"artifact\", \"total\": 88}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.5, \"i_ch1\": 0.01, \"i23\": 0.0, \"value\": 0.48085328156340584}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.5, \"i_ch1\": 0.01, \"i23\": 0.005, \"value\": 0.6100062816705903}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.5, \"i_ch1\": 0.01, \"i23\": 0.01, \"value\": 0.6710194990759026}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.5, \"i_ch1\": 0.01, \"i23\": 0.015, \"value\": 0.706851299456183}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.5, \"i_ch1\": 0.01, \"i23\": 0.02, \"value\": 0.7317490862152976}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.5, \"i_ch1\": 0.01, \"i23\": 0.025, \"value\": 0.7482838651759043}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.5, \"i_ch1\": 0.01, \"i23\": 0.03, \"value\": 0.7607208898841126}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.5, \"i_ch1\": 0.01, \"i23\": 0.035, \"value\": 0.7699447845705248}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.6, \"i_ch1\": 0.01, \"i23\": 0.0, \"value\": 0.47003092270419283}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.6, \"i_ch1\": 0.01, \"i23\": 0.005, \"value\": 0.6119327543456097}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.6, \"i_ch1\": 0.01, \"i23\": 0.01, \"value\": 0.6747304865977665}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.6, \"i_ch1\": 0.01, \"i23\": 0.015, \"value\": 0.7100207067999726}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.6, \"i_ch1\": 0.01, \"i23\": 0.02, \"value\": 0.7333289598559436}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.6, \"i_ch1\": 0.01, \"i23\": 0.025, \"value\": 0.7477525198679474}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.6, \"i_ch1\": 0.01, \"i23\": 0.03, \"value\": 0.751488311828401}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.6, \"i_ch1\": 0.01, \"i23\": 0.035, \"value\": 0.7663648757699175}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.7, \"i_ch1\": 0.01, \"i23\": 0.0, \"value\": 0.4613573826901248}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.7, \"i_ch1\": 0.01, \"i23\": 0.005, \"value\": 0.595607122955387}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.7, \"i_ch1\": 0.01, \"i23\": 0.01, \"value\": 0.6597573930478882}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.7, \"i_ch1\": 0.01, \"i23\": 0.015, \"value\": 0.6976357876811934}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.7, \"i_ch1\": 0.01, \"i23\": 0.02, \"value\": 0.7222716973983738}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.7, \"i_ch1\": 0.01, \"i23\": 0.025, \"value\": 0.7401390831769586}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.7, \"i_ch1\": 0.01, \"i23\": 0.03, \"value\": 0.7536828094638918}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.7, \"i_ch1\": 0.01, \"i23\": 0.035, \"value\": 0.7643038478826738}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.8, \"i_ch1\": 0.01, \"i23\": 0.0, \"value\": 0.44258546551300354}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.8, \"i_ch1\": 0.01, \"i23\": 0.005, \"value\": 0.5771946004864383}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.8, \"i_ch1\": 0.01, \"i23\": 0.01, \"value\": 0.642532756441997}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.8, \"i_ch1\": 0.01, \"i23\": 0.015, \"value\": 0.6813077378399246}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.8, \"i_ch1\": 0.01, \"i23\": 0.02, \"value\": 0.7067163888266833}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.8, \"i_ch1\": 0.01, \"i23\": 0.025, \"value\": 0.7251169200009103}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.8, \"i_ch1\": 0.01, \"i23\": 0.03, \"value\": 0.739128660093895}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.8, \"i_ch1\": 0.01, \"i23\": 0.035, \"value\": 0.7502019616590739}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.9, \"i_ch1\": 0.01, \"i23\": 0.0, \"value\": 0.42492197982224}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.9, \"i_ch1\": 0.01, \"i23\": 0.005, \"value\": 0.5595877752082085}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.9, \"i_ch1\": 0.01, \"i23\": 0.01, \"value\": 0.6259355241057064}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.9, \"i_ch1\": 0.01, \"i23\": 0.015, \"value\": 0.6654689501930101}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.9, \"i_ch1\": 0.01, \"i23\": 0.02, \"value\": 0.6916243159755779}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.9, \"i_ch1\": 0.01, \"i23\": 0.025, \"value\": 0.7104974708882837}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.9, \"i_ch1\": 0.01, \"i23\": 0.03, \"value\": 0.7250304708516855}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 3.9, \"i_ch1\": 0.01, \"i23\": 0.035, \"value\": 0.7364595124939058}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.0, \"i_ch1\": 0.01, \"i23\": 0.0, \"value\": 0.4082924432803807}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.0, \"i_ch1\": 0.01, \"i23\": 0.005, \"value\": 0.5427343495393001}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.0, \"i_ch1\": 0.01, \"i23\": 0.01, \"value\": 0.6098387659111129}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.0, \"i_ch1\": 0.01, \"i23\": 0.015, \"value\": 0.6501322456646567}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.0, \"i_ch1\": 0.01, \"i23\": 0.02, \"value\": 0.6769239258206053}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.0, \"i_ch1\": 0.01, \"i23\": 0.025, \"value\": 0.6962025020240956}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.0, \"i_ch1\": 0.01, \"i23\": 0.03, \"value\": 0.7111710448054777}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.0, \"i_ch1\": 0.01, \"i23\": 0.035, \"value\": 0.7230293158752004}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.1, \"i_ch1\": 0.01, \"i23\": 0.0, \"value\": 0.3925186629188975}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.1, \"i_ch1\": 0.01, \"i23\": 0.005, \"value\": 0.5265143026186115}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.1, \"i_ch1\": 0.01, \"i23\": 0.01, \"value\": 0.5942616168630446}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.1, \"i_ch1\": 0.01, \"i23\": 0.015, \"value\": 0.6352160749366157}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.1, \"i_ch1\": 0.01, \"i23\": 0.02, \"value\": 0.6626117951833383}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.1, \"i_ch1\": 0.01, \"i23\": 0.025, \"value\": 0.6822701569185697}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.1, \"i_ch1\": 0.01, \"i23\": 0.03, \"value\": 0.6977309403196779}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.1, \"i_ch1\": 0.01, \"i23\": 0.035, \"value\": 0.7099302213169143}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.2, \"i_ch1\": 0.01, \"i23\": 0.0, \"value\": 0.3776412182776198}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.2, \"i_ch1\": 0.01, \"i23\": 0.005, \"value\": 0.510939281450928}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.2, \"i_ch1\": 0.01, \"i23\": 0.01, \"value\": 0.5792292565880018}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.2, \"i_ch1\": 0.01, \"i23\": 0.015, \"value\": 0.6207597681543221}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.2, \"i_ch1\": 0.01, \"i23\": 0.02, \"value\": 0.6486636022570197}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.2, \"i_ch1\": 0.01, \"i23\": 0.025, \"value\": 0.6685991529628408}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.2, \"i_ch1\": 0.01, \"i23\": 0.03, \"value\": 0.6844642196746767}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.2, \"i_ch1\": 0.01, \"i23\": 0.035, \"value\": 0.6969742709935528}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.3, \"i_ch1\": 0.01, \"i23\": 0.0, \"value\": 0.3635311601225394}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.3, \"i_ch1\": 0.01, \"i23\": 0.005, \"value\": 0.49593044743237386}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.3, \"i_ch1\": 0.01, \"i23\": 0.01, \"value\": 0.564578372065061}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.3, \"i_ch1\": 0.01, \"i23\": 0.015, \"value\": 0.6065684626791893}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.3, \"i_ch1\": 0.01, \"i23\": 0.02, \"value\": 0.6350065718834167}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.3, \"i_ch1\": 0.01, \"i23\": 0.025, \"value\": 0.6552980992833952}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.3, \"i_ch1\": 0.01, \"i23\": 0.03, \"value\": 0.6715276443979358}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.3, \"i_ch1\": 0.01, \"i23\": 0.035, \"value\": 0.6843202722418674}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.4, \"i_ch1\": 0.01, \"i23\": 0.0, \"value\": 0.35015249729619846}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.4, \"i_ch1\": 0.01, \"i23\": 0.005, \"value\": 0.48146237992629703}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.4, \"i_ch1\": 0.01, \"i23\": 0.01, \"value\": 0.550399161055594}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.4, \"i_ch1\": 0.01, \"i23\": 0.015, \"value\": 0.5929052506436521}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.4, \"i_ch1\": 0.01, \"i23\": 0.02, \"value\": 0.621798921496821}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.4, \"i_ch1\": 0.01, \"i23\": 0.025, \"value\": 0.6424537968810484}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.4, \"i_ch1\": 0.01, \"i23\": 0.03, \"value\": 0.6590033795718578}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.4, \"i_ch1\": 0.01, \"i23\": 0.035, \"value\": 0.6720327347673487}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.5, \"i_ch1\": 0.01, \"i23\": 0.0, \"value\": 0.33736195217651455}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.5, \"i_ch1\": 0.01, \"i23\": 0.005, \"value\": 0.46752789611796336}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.5, \"i_ch1\": 0.01, \"i23\": 0.01, \"value\": 0.5366983350018223}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.5, \"i_ch1\": 0.01, \"i23\": 0.015, \"value\": 0.5796367155825907}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.5, \"i_ch1\": 0.01, \"i23\": 0.02, \"value\": 0.6089496075346783}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.5, \"i_ch1\": 0.01, \"i23\": 0.025, \"value\": 0.6299650021495076}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.5, \"i_ch1\": 0.01, \"i23\": 0.03, \"value\": 0.646753098475343}\n{\"type\": \"kpi\", \"name\": \"efficiency\", \"vin\": 4.5, \"i_ch1\": 0.01, \"i23\": 0.035, \"value\": 0.6601033444622905}\n{\"type\": \"artifact\", \"path\": \"runs\\\\Test\\\\efficiency.csv\"}\n{\"type\": \"artifact\", \"path\": \"runs\\\\Test\\\\efficiency.xlsx\"}\n{\"type\": \"done\", \"state\": \"passed\"}\n\n</code></pre>"},{"location":"plan/","title":"\u6e2c\u8a66\u8a08\u756b\u8a2d\u5b9a\u6a94","text":"<p>\u4ee5\u4e0b\u5167\u5bb9\u81ea\u52d5\u5f15\u7528 repo \u7684 <code>backend/plan.yaml</code>\uff1a</p>"},{"location":"plan/#planyaml","title":"plan.yaml","text":"<pre><code>schema_version: 1\nrun_info: { project: PMIC-XYZ, lot: L01, dut_sn: SN000123 }\ninstruments:\n  keithley2450_1: \"TCPIP0::169.254.250.237::INSTR\"\n  keithley2450_2: \"TCPIP0::169.254.106.133::INSTR\"\n  keithley2450_3: \"TCPIP0::169.254.251.196::INSTR\"\n  dmm6500_1:      \"TCPIP0::169.254.210.138::INSTR\"\n  dmm6500_2:      \"TCPIP0::169.254.210.136::INSTR\"\nlimits: { voltage_limit: 5.0, current_limit: 0.1 , voltage_limit_ch1: 4.0, voltage_limit_x23: 7.0 }\nsweep:  { vin: [3.6, 4.0, 4.0], i_ch1: [0.01], i23: [0.00, 0.01] }\noutputs: { excel: \"efficiency.xlsx\", csv: \"efficiency.csv\" }\nmodes: run\n\n</code></pre>"},{"location":"progress/","title":"\u6e2c\u8a66\u8a08\u756b\u8a2d\u5b9a\u6a94","text":"<p>\u4ee5\u4e0b\u5167\u5bb9\u81ea\u52d5\u5f15\u7528 repo \u7684 <code>Test/progress.json</code>\uff1a</p>"},{"location":"progress/#progressjson","title":"progress.json","text":"<pre><code>{\n  \"schema_version\": 1,\n  \"updated_at\": \"2025-08-26T19:12:30Z\",\n  \"state\": \"passed\",\n  \"percent\": 100,\n  \"message\": \"Done\",\n  \"artifacts\": [\n    {\n      \"type\": \"csv\",\n      \"path\": \"efficiency.csv\"\n    },\n    {\n      \"type\": \"xlsx\",\n      \"path\": \"efficiency.xlsx\"\n    }\n  ]\n}\n</code></pre>"},{"location":"quickstart/","title":"\u5feb\u901f\u958b\u59cb","text":"<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>"},{"location":"quickstart/#_2","title":"\u5b89\u88dd","text":"<pre><code># \u4f9d\u5c08\u6848\u5be6\u969b\u9700\u8981\npython -m venv .venv\n. .venv/Scripts/activate  # Windows\npip install -r requirements.txt  # \u82e5\u5c08\u6848\u6709\u63d0\u4f9b\n</code></pre>"},{"location":"quickstart/#_3","title":"\u57f7\u884c","text":"<pre><code>python path/to/your_entry.py\n</code></pre>"},{"location":"quickstart/#_4","title":"\u6587\u4ef6\u672c\u5730\u9810\u89bd","text":"<pre><code>pip install mkdocs mkdocs-material\nmkdocs serve  # http://127.0.0.1:8000\n</code></pre> <p>=======</p>"},{"location":"quickstart/#_5","title":"\u672c\u5730\u9810\u89bd\u6587\u4ef6","text":"<pre><code>pip install mkdocs mkdocs-material \"mkdocstrings[python]\"\nmkdocs serve  # http://127.0.0.1:8000\n</code></pre>"},{"location":"quickstart/#_6","title":"\u5c08\u6848\u5b89\u88dd\uff08\u7bc4\u4f8b\uff0c\u4f9d\u5be6\u969b\u8abf\u6574\uff09","text":"<pre><code>python -m venv .venv\n. .venv/Scripts/activate  # Windows\npip install -r requirements.txt\npython -m ats   # \u4f8b\u5982\u6709 __main__.py\n</code></pre>"},{"location":"quickstart/#_7","title":"\u64b0\u5beb\u6587\u4ef6","text":"<ul> <li>\u5728 <code>docs/</code> \u65b0\u589e <code>.md</code> \u6a94\u5373\u53ef\u64f4\u5145\u5c0e\u89bd\u3002</li> <li>\u5728\u539f\u59cb\u78bc\u7684 \u51fd\u5f0f/\u985e\u5225 docstring \u586b\u5beb\u8aaa\u660e\uff0cAPI \u9801\u6703\u81ea\u52d5\u5e36\u5165\u3002 <p>V0.0</p> </li> </ul>"}]}